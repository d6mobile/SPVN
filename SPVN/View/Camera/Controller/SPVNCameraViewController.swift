//
//  SPVNCameraViewController.swift
//  SPVN
//
//  Created by ntq on 11/29/19.
//  Copyright Â© 2019 DuyDV. All rights reserved.
//

import UIKit
import Photos

class SPVNCameraViewController: BaseViewController {
    
    // MARK: IBOutlet    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    
    ///Allows the user to put the camera in video mode.
    
    // MARK: Properties
    let cameraController = CameraController()
    let minimumZoom: CGFloat = 1.0
    let maximumZoom: CGFloat = 3.0
    var lastZoomFactor: CGFloat = 1.0
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Do any additional setup after loading the view.
        self.banner.removeFromSuperview()
        configureCameraController()
    }
    
    
    func configureCameraController() {
        cameraController.prepare {(error) in
            if let error = error {
                print(error)
            }
            let pinchRecognizer = UIPinchGestureRecognizer(target: self, action:#selector(self.pinch(_:)))
            self.capturePreviewView.addGestureRecognizer(pinchRecognizer)
            try? self.cameraController.displayPreview(on: self.capturePreviewView)
        }
    }
    
    @objc func pinch(_ pinch: UIPinchGestureRecognizer) {
        
        var device: AVCaptureDevice!
        if let object = cameraController.frontCameraInput?.device {
            device = object
        } else if let object = cameraController.rearCameraInput?.device {
            device = object
        }
        
        guard device != nil else { return }
        // Return zoom value between the minimum and maximum zoom values
        
        let newScaleFactor = minMaxZoom(device: device, pinch.scale * lastZoomFactor)
        
        switch pinch.state {
        case .began: fallthrough
        case .changed: update(device: device, scale: newScaleFactor)
        case .ended:
            lastZoomFactor = minMaxZoom(device: device, newScaleFactor)
            update(device: device, scale: lastZoomFactor)
        default: break
        }
    }
    
    func update(device: AVCaptureDevice, scale factor: CGFloat) {
        do {
            try device.lockForConfiguration()
            defer { device.unlockForConfiguration() }
            device.videoZoomFactor = factor
        } catch {
            print("\(error.localizedDescription)")
        }
    }
    
    func minMaxZoom(device: AVCaptureDevice, _ factor: CGFloat) -> CGFloat {
        return min(min(max(factor, minimumZoom), maximumZoom), device.activeFormat.videoMaxZoomFactor)
    }
    
    override var prefersStatusBarHidden: Bool {
        return true
    }
    
    // MARK: IBAction
    @IBAction func toggleFlash(_ sender: UIButton) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "icon_flash_off"), for: .normal)
        }
            
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "icon_flash_on"), for: .normal)
        }
    }
    
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
        }
    }
    
    @IBAction func captureImage(_ sender: UIButton) {
        cameraController.captureImage {(image, error) in
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            
            try? PHPhotoLibrary.shared().performChangesAndWait {
                PHAssetChangeRequest.creationRequestForAsset(from: image)
            }
        }
    }
    
    @IBAction func dimssDidTouch(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
    }
    
}
